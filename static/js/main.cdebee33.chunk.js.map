{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","search","setSearch","employees","setEmployees","employeesFull","React","useRef","useEffect","getEmployees","current","console","log","filter","employee","name","first","last","toLowerCase","indexOf","a","axios","get","res","data","results","isLoading","isEmpty","length","className","onChange","evt","currentTarget","value","placeholder","type","onClick","newData","sort","b","nameA","nameB","toLocaleString","localeCompare","scope","map","key","login","uuid","alt","picture","src","thumbnail","cell","email","dayjs","dob","date","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uVA2GeA,MArGf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEqBF,mBAAS,IAF9B,mBAENG,EAFM,KAEKC,EAFL,KAGPC,EAAgBC,IAAMC,OAAO,MAEnCC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACJH,EAAcK,UAChBC,QAAQC,IAAI,eAAgBP,GAC5BD,EAAaC,EAAcK,QAAQG,QAAO,SAAAC,GAExC,OAAiC,IADpB,UAAGA,EAASC,KAAKC,MAAjB,YAA0BF,EAASC,KAAKE,MAAOC,cAChDC,QAAQlB,UAGvB,CAACA,IAEJ,IAAMQ,EAAY,uCAAG,4BAAAW,EAAA,sEACDC,IAAMC,IAAN,iDADC,OACbC,EADa,OAEnBlB,EAAcK,QAAUa,EAAIC,KAAKC,QACjCrB,EAAaC,EAAcK,SAHR,2CAAH,qDAKZgB,EAAsC,OAA1BrB,EAAcK,QAC1BiB,EAA+B,IAArBxB,EAAUyB,OAE1B,OACE,yBAAKC,UAAU,OACZH,EAAY,2CAET,oCACE,gCACE,mDAKF,8BACE,2BAAOI,SAAU,SAACC,GAAD,OAAS7B,EAAU6B,EAAIC,cAAcC,QAAQC,YAAY,mBAAmBC,KAAK,OAAOpB,KAAK,OAAOkB,MAAOhC,IAC3H0B,EAAU,8CAA2B,MAGxC,6BACA,kDACA,4BAAQQ,KAAK,SAASN,UAAU,4BAA4BO,QAAS,WACnE,IAAMC,EAAO,YAAOhC,EAAcK,SAClC2B,EAAQC,MAAK,SAAClB,EAAGmB,GACf,IAAMC,EAAQpB,EAAEL,KAAKC,MAAQ,GAAKI,EAAEL,KAAKE,KACnCwB,EAAQF,EAAExB,KAAKC,MAAQ,GAAKuB,EAAExB,KAAKE,KACzC,OAAOuB,EAAME,iBAAiBC,cAAcF,EAAMC,qBAEpDtC,EAAaiC,KAPf,aAaA,4BAAQF,KAAK,SAASN,UAAU,4BAA4BO,QAAS,WACnE,IAAMC,EAAO,YAAOhC,EAAcK,SAClC2B,EAAQC,MAAK,SAAClB,EAAGmB,GACf,IAAMC,EAAQpB,EAAEL,KAAKC,MAAQ,GAAKI,EAAEL,KAAKE,KAEzC,OADcsB,EAAExB,KAAKC,MAAQ,GAAKuB,EAAExB,KAAKE,MAC5ByB,iBAAiBC,cAAcH,EAAME,qBAEpDtC,EAAaiC,KAPf,cAYA,6BAAK,8BACL,2BAAOR,UAAU,SACf,+BACE,4BACE,wBAAIe,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGHzC,EAAU0C,KAAI,SAAC/B,GAAD,OACb,2BAAOgC,IAAKhC,EAASiC,MAAMC,MACzB,4BACE,wBAAIJ,MAAM,OAAM,yBAAKK,IAAKnC,EAASoC,QAAQnC,KAAMoC,IAAKrC,EAASoC,QAAQE,aACvE,4BAAKtC,EAASC,KAAKC,OACnB,4BAAKF,EAASC,KAAKE,MACnB,4BAAKH,EAASuC,MACd,4BAAKvC,EAASwC,OACd,4BAAKC,IAAMzC,EAAS0C,IAAIC,MAAMC,OAAO,wBCpFrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.cdebee33.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport axios from 'axios'\nimport dayjs from 'dayjs'\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [employees, setEmployees] = useState([])\n  const employeesFull = React.useRef(null)\n\n  useEffect(() => {\n    getEmployees()\n  }, [])\n\n  useEffect(() => {\n    if (employeesFull.current) {\n      console.log('Filtering...', employeesFull);\n      setEmployees(employeesFull.current.filter(employee => {\n        const name = `${employee.name.first} ${employee.name.last}`.toLowerCase();\n        return name.indexOf(search) !== -1;\n      }))\n    }\n  }, [search])\n\n  const getEmployees = async () => {\n    const res = await axios.get(`https://randomuser.me/api/?results=200&nat=us`)\n    employeesFull.current = res.data.results;\n    setEmployees(employeesFull.current)\n  }\n  const isLoading = employeesFull.current === null;\n  const isEmpty = employees.length === 0;\n  \n  return (\n    <div className=\"App\">\n      {isLoading ? <div>Loading...</div> :\n        (\n          <>\n            <header >\n              <h1 >\n                Employee Directory\n              </h1>\n            </header>\n\n            <form>\n              <input onChange={(evt) => setSearch(evt.currentTarget.value)} placeholder=\"Search Employees\" type=\"text\" name=\"name\" value={search} />\n              {isEmpty ? <div>No Results...</div> : null}\n            </form>\n\n            <br />\n            <h5>Alphabetical Order</h5>\n            <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={() => {\n              const newData = [...employeesFull.current]\n              newData.sort((a, b) => {\n                const nameA = a.name.first + '' + a.name.last;\n                const nameB = b.name.first + '' + b.name.last;\n                return nameA.toLocaleString().localeCompare(nameB.toLocaleString());\n              })\n              setEmployees(newData)\n            }\n            }\n            >\n              Ascending\n            </button >\n            <button type=\"button\" className=\"btn btn-outline-secondary\" onClick={() => {\n              const newData = [...employeesFull.current]\n              newData.sort((a, b) => {\n                const nameA = a.name.first + '' + a.name.last;\n                const nameB = b.name.first + '' + b.name.last;\n                return nameB.toLocaleString().localeCompare(nameA.toLocaleString());\n              })\n              setEmployees(newData)\n            }\n            }>\n              Descending\n            </button>\n            <div><br /></div>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Picture</th>\n                  <th scope=\"col\">First</th>\n                  <th scope=\"col\">Last</th>\n                  <th scope=\"col\">Cell</th>\n                  <th scope=\"col\">Email</th>\n                  <th scope=\"col\">DOB</th>\n                </tr>\n              </thead>\n              {employees.map((employee) =>\n                <tbody key={employee.login.uuid}>\n                  <tr>\n                    <th scope=\"row\"><img alt={employee.picture.name} src={employee.picture.thumbnail} /></th>\n                    <td>{employee.name.first}</td>\n                    <td>{employee.name.last}</td>\n                    <td>{employee.cell}</td>\n                    <td>{employee.email}</td>\n                    <td>{dayjs(employee.dob.date).format(\"MM-DD-YYYY\")}</td>\n                  </tr>\n                </tbody>)}\n            </table>\n\n          </>)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}